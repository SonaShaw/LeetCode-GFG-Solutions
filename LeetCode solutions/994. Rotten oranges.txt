




Problem link: https://leetcode.com/problems/rotting-oranges/









class Solution {
    public int orangesRotting(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean visited[][] = new boolean[m][n];
        int time[][] = new int[m][n];
        
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(!visited[i][j] && grid[i][j]==2){
                    bfs(grid, i, j, visited, time);
                }
            }
        }
        
        int minTime = Integer.MIN_VALUE;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(!visited[i][j] && grid[i][j]==1)
                    return -1;
                minTime = Math.max(minTime, time[i][j]);
            }
        }
        return minTime;
    }
    
    private static void bfs(int grid[][], int i, int j, boolean[][] visited, int time[][]){
        int m = grid.length;
        int n = grid[0].length;
        Queue<Cell> q = new LinkedList<>();
        q.add(new Cell(i,j,0));
        visited[i][j] = true;
        time[i][j] = 0;
        
        Cell u;
        
        int dx[] = {0,1,0,-1};
        int dy[] = {1,0,-1,0};
        
        while(!q.isEmpty()){
            u = q.poll();
            
            for(int k=0; k<4; k++){
                int vi = u.x+dx[k];
                int vj = u.y+dy[k];
                
                if(isInside(vi, vj, m, n)){
                    if(!visited[vi][vj] && grid[vi][vj]==1){
                        q.add(new Cell(vi,vj,u.t+1));
                        visited[vi][vj] = true;
                        time[vi][vj] = u.t+1;
                    }else if(visited[vi][vj] && grid[vi][vj]==1 && time[vi][vj]>u.t+1){
                        q.add(new Cell(vi,vj,u.t+1));
                        visited[vi][vj] = true;
                        time[vi][vj] = u.t+1;
                    }
                }
            }
            
        }
    }
    
    private static boolean isInside(int i, int j, int m, int n){
        if(i>=0&&i<m&&j>=0&&j<n)
            return true;
        return false;
    }
}


class Cell{
    int x;
    int y;
    int t;
    public Cell(int x, int y, int t){
        this.x = x;
        this.y = y;
        this.t = t;
    }
}